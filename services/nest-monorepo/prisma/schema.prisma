// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// generator zod {
//   provider                         = "prisma-zod-generator"
//   output                           = "../../pm-validator/src/zod"
//   useMultipleFiles                 = true // default is false
//   createInputTypes                 = true // default is true
//   createModelTypes                 = false // default is true
//   addInputTypeValidation           = false // default is true
//   addIncludeType                   = false // default is true
//   addSelectType                    = false // default is true
//   validateWhereUniqueInput         = true // default is false
//   createOptionalDefaultValuesTypes = true // default is false
//   createRelationValuesTypes        = true // default is false
//   createPartialTypes               = true // default is false
//   useDefaultValidators             = true // default is true
//   coerceDate                       = false // default is true
//   writeNullishInModelTypes         = true // default is false
// }

generator zod {
  provider      = "zod-prisma"
  output        = "../../../packages/pm-validation/zod" // (default) the directory where generated zod schemas will be saved
  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model
  // modelCase             = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)
  // modelSuffix           = "Schema" // (default) Suffix to apply to your prisma models when naming Zod schemas
  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  // useDecimalJs          = true // represent the prisma Decimal type using Decimal.js (as Prisma does)
  // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable
  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  // prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = true // allows null assignment to optional JSON fields
}

model User_Account {
  id             String           @id @default(uuid())
  email          String           @unique
  password       String ///@zod.min(8).max(20).regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])/, 'Password must contain at least one lowercase letter, one uppercase letter, one number, and one special character')
  username       String ///@zod.min(3).max(20).regex(/^[a-zA-Z0-9]+$/, 'Username must contain only letters and numbers')
  authToken      String?
  Project        Project[]
  created        DateTime         @default(now()) /// @zod.optional()
  updated        DateTime         @updatedAt /// @zod.optional()
  Task_List      Task_List[]
  Project_Member Project_Member[]
}

// Project
model Project {
  id             String           @id @default(uuid()) /// @zod.uuid()
  title          String
  description    String?
  ownerId        String
  closed         Boolean          @default(false) /// @zod.default(false)
  owner          User_Account     @relation(fields: [ownerId], references: [id])
  favorite       Boolean          @default(false) /// @zod.default(false)
  created        DateTime         @default(now()) /// @zod.optional()
  updated        DateTime         @updatedAt /// @zod.optional()
  list           List[]
  Project_Member Project_Member[]

  @@index([ownerId])
}

model Project_Member {
  id        String       @id @default(uuid()) /// @zod.uuid()
  projectId String
  userId    String
  Project   Project      @relation(fields: [projectId], references: [id])
  User      User_Account @relation(fields: [userId], references: [id])
  created   DateTime     @default(now()) /// @zod.optional()
  updated   DateTime     @updatedAt /// @zod.optional()

  @@index([projectId])
  @@index([userId])
}

model List {
  id        String   @id @default(uuid()) /// @zod.uuid()
  title     String
  projectId String
  Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Card      Card[]
  created   DateTime @default(now()) /// @zod.optional()
  updated   DateTime @updatedAt /// @zod.optional()

  @@index([projectId])
}

model Card {
  id          String         @id @default(uuid()) /// @zod.uuid()
  title       String         @default("Untitled Card") /// @zod.optional()
  description String? /// @zod.optional()
  due_date    DateTime?
  avatar      String?
  list_id     String
  List        List           @relation(fields: [list_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  priority    Priority?
  status      Status?
  Comment     Card_Comment[]
  Task_List   Task_List[]
  created     DateTime       @default(now()) /// @zod.optional()
  updated     DateTime       @updatedAt /// @zod.optional()

  @@index([list_id])
}

model Card_Comment {
  id      String   @id @default(uuid()) /// @zod.uuid()
  comment String
  cardId  String
  card    Card     @relation(fields: [cardId], references: [id])
  created DateTime @default(now())
  updated DateTime @updatedAt

  @@index([cardId])
}

model Task_List {
  id            String        @id @default(uuid()) /// @zod.uuid().optional()
  title         String
  cardId        String
  card          Card          @relation(fields: [cardId], references: [id])
  Task          Task[]
  UserAccount   User_Account? @relation(fields: [userAccountId], references: [id])
  userAccountId String?
  created       DateTime      @default(now())
  updated       DateTime      @updatedAt

  @@index([cardId])
  @@index([userAccountId])
}

model Task {
  id              String            @id @default(uuid()) /// @zod.uuid().optional()
  title           String
  done            Boolean           @default(false)
  assigned_to     String?
  task_listId     String
  Task_List       Task_List         @relation(fields: [task_listId], references: [id])
  created         DateTime          @default(now())
  updated         DateTime          @updatedAt
  Task_Assignment Task_Assignment[]

  @@index([task_listId])
}

model Task_Assignment {
  id            String   @id @default(uuid()) /// @zod.uuid().optional()
  task_id_fk    String
  assigned_to   String
  created       DateTime @default(now())
  updated       DateTime @updatedAt
  Project_Tasks Task     @relation(fields: [task_id_fk], references: [id])

  @@index([task_id_fk])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  TODO
  IN_PROGRESS
  DONE
  IN_REVIEW
  APPROVED
}
